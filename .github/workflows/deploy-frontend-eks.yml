name: Deploy Frontend to EKS # 工作流名称

on: # 触发工作流的事件
  push:
    branches:
      - main # 当代码推送到 main 分支时触发

  workflow_dispatch: {} # 允许手动触发


env: # 定义环境变量
  AWS_REGION: ap-southeast-1                   # 替换为您的 AWS 区域
  EKS_CLUSTER_NAME: eks-test    # 替换为您的 EKS 集群名称
  ECR_REPOSITORY: test/testrepo         # 替换为您的 ECR 仓库名称
  # Kubernetes Deployment 和 Service 的 YAML 文件路径
  K8S_MANIFESTS_DIR: my-frontend-app/k8s
  K8S_DEPLOYMENT_FILE: my-frontend-app/k8s/deployment.yaml
  # 任务定义中容器的名称，用于更新镜像标签
  CONTAINER_NAME_IN_K8S_DEPLOYMENT: frontend-app-container # 必须与 k8s/deployment.yaml 中的容器名称匹配


permissions: # 授予工作流运行所需的权限
  contents: read # 允许读取仓库内容
  id-token: write # 允许使用 OIDC 获取 AWS 临时凭证 (关键)

jobs: # 定义工作流中的 Job
  build-and-deploy: # 构建并部署 Job
    runs-on: ubuntu-latest # 在 Ubuntu 虚拟机上运行


    steps: # Job 中的一系列步骤
      - name: Checkout repository 
      # 检出 GitHub 仓库代码，将 GitHub 仓库中的所有代码克隆到工作流运行器上，以便后续的构建和部署步骤能够访问到文件。
        uses: actions/checkout@v4


      - name: Configure AWS credentials (using AK/SK)# 配置 AWS 凭证，使用 AK/SK 方式
        uses: aws-actions/configure-aws-credentials@v4 # 配置AWS凭证
        with:
          aws-region: ${{ env.AWS_REGION }}
          # 使用 GitHub Secrets 获取 Access Key ID
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # 使用 GitHub Secrets 获取 Secret Access Key
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR # 登录 ECR
        id: login-ecr # 为此步骤设置 ID，以便后续步骤访问其输出
        uses: aws-actions/amazon-ecr-login@v2  #自动登录到Amazon ECR


      - name: Build and push Docker image to ECR # 构建 Docker 镜像并推送到 ECR
        id: build-image # 为此步骤设置 ID
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} # 从登录步骤获取 ECR 注册表 URI
          IMAGE_TAG: ${{ github.sha }} # 使用 commit SHA 作为镜像标签，确保唯一性
        run: |
          # 构建 Docker 镜像
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f my-frontend-app/Dockerfile my-frontend-app/
          # 为方便起见，也打一个 latest 标签 (如果 ECR 仓库设置为 mutable 且您需要 latest)
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

          # 推送 Docker 镜像
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest # 如果需要

          # 将完整的镜像 URI 输出，供后续步骤使用
          echo "FULL_IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Set up Kubeconfig for EKS # 配置 kubectl 访问 EKS 集群
        uses: aws-actions/configure-aws-credentials@v4 # 再次使用此 Action，用于配置 Kubeconfig
        with:
          aws-region: ${{ env.AWS_REGION }}
          # 使用 GitHub Secrets 获取 Access Key ID
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # 使用 GitHub Secrets 获取 Secret Access Key
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          cluster-name: ${{ env.EKS_CLUSTER_NAME }} # 自动为集群生成 Kubeconfig

      - name: Install kubectl # 安装 kubectl 命令行工具
        uses: azure/setup-kubectl@v3  #在工作流运行器上安装 kubectl
        with:
          version: 'latest' # 安装最新版 kubectl

      - name: Apply Kubernetes Manifests to EKS # 应用 Kubernetes 配置到 EKS 集群
        run: |
          # 应用所有 k8s 目录下的 YAML 文件
          kubectl apply -f ${{ env.K8S_MANIFESTS_DIR }}
          echo "Kubernetes manifests applied to EKS."
